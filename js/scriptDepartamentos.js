alert('¬°EL SCRIPT SE EST√Å CARGANDO!');

// DIAGN√ìSTICO COMPLETO - PASO A PASO
console.log('üîç === INICIANDO DIAGN√ìSTICO COMPLETO ===');

// 1. Verificar si el script se est√° cargando
console.log('‚úÖ El script se est√° ejecutando');
console.log('üìÖ Timestamp:', new Date().toLocaleString());

// 2. Verificar estado del DOM
console.log('üìÑ Estado del DOM:', document.readyState);

// 3. Funci√≥n para verificar elementos cr√≠ticos
function verificarElementosCriticos() {
    console.log('üîç === VERIFICANDO ELEMENTOS CR√çTICOS ===');
    
    const elementosRequeridos = [
        'lista-departamentos',
        'btnFlotanteAgregar', 
        'modal-agregar',
        'modal-editar',
        'busquedaDepartamento'
    ];
    
    elementosRequeridos.forEach(id => {
        const elemento = document.getElementById(id);
        if (elemento) {
            console.log(`‚úÖ Elemento encontrado: #${id}`, elemento);
        } else {
            console.error(`‚ùå Elemento NO encontrado: #${id}`);
        }
    });
}

// 4. Funci√≥n para insertar contenido de prueba directamente
function insertarContenidoPrueba() {
    console.log('üß™ === INSERTANDO CONTENIDO DE PRUEBA ===');
    
    const lista = document.getElementById('lista-departamentos');
    if (!lista) {
        console.error('‚ùå No se puede insertar contenido - lista-departamentos no existe');
        return;
    }
    
    // Insertar contenido HTML directamente
    lista.innerHTML = `
        <div class="alert alert-info">
            <h4>üß™ CONTENIDO DE PRUEBA</h4>
            <p>Si ves este mensaje, el script est√° funcionando correctamente.</p>
            <p>Timestamp: ${new Date().toLocaleString()}</p>
        </div>
        
        <div class="card shadow-sm mb-3">
            <div class="card-body">
                <h5 class="card-title">Departamento de Prueba 1</h5>
                <p class="card-text">Este es un departamento de prueba generado por JavaScript</p>
                <button class="btn btn-primary btn-sm" onclick="alert('Bot√≥n funciona!')">Probar Bot√≥n</button>
            </div>
        </div>
        
        <div class="card shadow-sm mb-3">
            <div class="card-body">
                <h5 class="card-title">Departamento de Prueba 2</h5>
                <p class="card-text">Segundo departamento de prueba</p>
                <button class="btn btn-secondary btn-sm" onclick="console.log('Bot√≥n 2 clickeado')">Probar Bot√≥n 2</button>
            </div>
        </div>
    `;
    
    console.log('‚úÖ Contenido de prueba insertado');
}

// 5. Funci√≥n para verificar errores de consola
function verificarErrores() {
    console.log('üîç === VERIFICANDO ERRORES ===');
    
    // Capturar errores globales
    window.addEventListener('error', (e) => {
        console.error('‚ùå Error global capturado:', e.error);
        console.error('üìÅ Archivo:', e.filename);
        console.error('üìç L√≠nea:', e.lineno);
        console.error('üìç Columna:', e.colno);
    });
    
    // Capturar errores de promesas
    window.addEventListener('unhandledrejection', (e) => {
        console.error('‚ùå Promesa rechazada:', e.reason);
    });
    
    console.log('‚úÖ Listeners de error configurados');
}

// 6. Funci√≥n para verificar dependencias
function verificarDependencias() {
    console.log('üîç === VERIFICANDO DEPENDENCIAS ===');
    
    // Verificar Bootstrap
    if (typeof bootstrap !== 'undefined') {
        console.log('‚úÖ Bootstrap cargado:', bootstrap);
    } else {
        console.warn('‚ö†Ô∏è Bootstrap no detectado');
    }
    
    // Verificar SweetAlert
    if (typeof Swal !== 'undefined') {
        console.log('‚úÖ SweetAlert cargado:', Swal);
    } else {
        console.warn('‚ö†Ô∏è SweetAlert no detectado');
    }
    
    // Verificar jQuery (si se usa)
    if (typeof $ !== 'undefined') {
        console.log('‚úÖ jQuery cargado:', $);
    } else {
        console.log('‚ÑπÔ∏è jQuery no detectado (no requerido)');
    }
}

// 7. Funci√≥n para probar la API
async function probarAPICompleta() {
    console.log('üîç === PROBANDO API ===');
    
    const API_URL = "https://retoolapi.dev/Tw7Xso/Departamentos";
    
    try {
        console.log('üì° Realizando petici√≥n a:', API_URL);
        
        const response = await fetch(API_URL);
        console.log('üìä Respuesta recibida:', response);
        console.log('üìä Status:', response.status);
        console.log('üìä StatusText:', response.statusText);
        console.log('üìä Headers:', [...response.headers.entries()]);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ Datos de la API:', data);
        console.log('üìä Tipo de datos:', typeof data);
        console.log('üìä Es array:', Array.isArray(data));
        console.log('üìä Longitud:', data.length);
        
        return data;
        
    } catch (error) {
        console.error('‚ùå Error en API:', error);
        console.error('üìä Tipo de error:', typeof error);
        console.error('üìä Mensaje:', error.message);
        console.error('üìä Stack:', error.stack);
        
        return null;
    }
}

// 8. Funci√≥n para verificar la carga de archivos
function verificarCargaArchivos() {
    console.log('üîç === VERIFICANDO CARGA DE ARCHIVOS ===');
    
    // Verificar scripts cargados
    const scripts = document.querySelectorAll('script');
    console.log(`üìÑ Scripts encontrados: ${scripts.length}`);
    
    scripts.forEach((script, index) => {
        console.log(`üìÑ Script ${index + 1}:`, script.src || 'inline');
    });
    
    // Verificar estilos cargados
    const estilos = document.querySelectorAll('link[rel="stylesheet"]');
    console.log(`üé® Estilos encontrados: ${estilos.length}`);
    
    estilos.forEach((style, index) => {
        console.log(`üé® Estilo ${index + 1}:`, style.href);
    });
}

// 9. Funci√≥n principal de diagn√≥stico
async function ejecutarDiagnosticoCompleto() {
    console.log('üöÄ === EJECUTANDO DIAGN√ìSTICO COMPLETO ===');
    
    // Paso 1: Verificar elementos
    verificarElementosCriticos();
    
    // Paso 2: Verificar dependencias
    verificarDependencias();
    
    // Paso 3: Verificar carga de archivos
    verificarCargaArchivos();
    
    // Paso 4: Configurar captura de errores
    verificarErrores();
    
    // Paso 5: Insertar contenido de prueba
    insertarContenidoPrueba();
    
    // Paso 6: Probar API
    const datosAPI = await probarAPICompleta();
    
    // Paso 7: Mostrar resumen
    console.log('üèÅ === RESUMEN DEL DIAGN√ìSTICO ===');
    console.log('üìä DOM State:', document.readyState);
    console.log('üìä API Response:', datosAPI ? 'OK' : 'FALLO');
    console.log('üìä Contenido insertado:', document.getElementById('lista-departamentos') ? 'OK' : 'FALLO');
    
    // Paso 8: Crear bot√≥n de prueba adicional
    const btnPrueba = document.createElement('button');
    btnPrueba.textContent = 'BOT√ìN DE PRUEBA JS';
    btnPrueba.className = 'btn btn-success btn-lg';
    btnPrueba.style.position = 'fixed';
    btnPrueba.style.top = '10px';
    btnPrueba.style.right = '10px';
    btnPrueba.style.zIndex = '9999';
    btnPrueba.onclick = () => {
        alert('¬°JavaScript est√° funcionando!');
        console.log('‚úÖ Bot√≥n de prueba clickeado');
    };
    
    document.body.appendChild(btnPrueba);
    console.log('‚úÖ Bot√≥n de prueba agregado');
}

// 10. Ejecutar diagn√≥stico de m√∫ltiples maneras
console.log('üîß Configurando ejecuci√≥n del diagn√≥stico...');

// M√©todo 1: DOMContentLoaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéØ DOMContentLoaded disparado');
    ejecutarDiagnosticoCompleto();
});

// M√©todo 2: Si DOM ya est√° listo
if (document.readyState === 'loading') {
    console.log('üìÑ DOM est√° cargando...');
} else {
    console.log('üìÑ DOM ya est√° listo, ejecutando inmediatamente');
    ejecutarDiagnosticoCompleto();
}

// M√©todo 3: Timeout como fallback
setTimeout(() => {
    console.log('‚è∞ Ejecutando diagn√≥stico por timeout');
    ejecutarDiagnosticoCompleto();
}, 1000);

// M√©todo 4: Window load
window.addEventListener('load', () => {
    console.log('üéØ Window load disparado');
    ejecutarDiagnosticoCompleto();
});

console.log('‚úÖ === SCRIPT DE DIAGN√ìSTICO CONFIGURADO ===');